import streamlit as st
import pickle
import pandas as pd
st.title("vamos a predecir cosas üöÄ")

@st.cache_resource
def load_model(modelName):
    with open(f'models/data/model{modelName}.pkl','rb') as gb:
        modelo = pickle.load(gb)
    return modelo

model_text = st.selectbox("Select Slider", options=["Bayesian", "Random Forest", "ExtraTrees","Gradient Boosting","Decision Tree"])

modelo = None
try:
    if model_text == "Bayesian":
        st.write("Bayesian")
        modelo = load_model("B")
    elif model_text == "Random Forest":
        st.write("Random Forest")
        modelo = load_model("RF")
    elif model_text == "ExtraTrees":
        st.write("ExtraTrees")
        modelo = load_model("ET")
    elif model_text == "Gradient Boosting":
        st.write("Gradient Boosting")
        modelo = load_model("GB")
    elif model_text == "Decision Tree":
        st.write("Decision Tree")
        modelo = load_model("DT")

    st.sidebar.success(f"Modelo {model_text} cargado correctamente ‚úÖ")
except:
    st.sidebar.error(f"Modelo {model_text} no encontrado ‚ùå")

st.subheader("Machine Learning modelo seleccionado") 

st.subheader("Algoritmo de Machine Learning")
st.write("Definici√≥n del algoritmo implementado para predecir los patrones de flujo.")

st.subheader("Caracter√≠sticas de entrada")

features = ['Velocidad superficial del l√≠quido (Vsl)', 'Velocidad superficial del gas (Vsg)', 'Viscosidad del l√≠quido (VisL)', 'Viscosidad del gas (VisG)', 'Densidad del l√≠quido (DenL)', 'Densidad del gas (DenG)', 'Tensi√≥n superficial (ST)', '√Ångulo de inclinaci√≥n tuber√≠a (Ang)', 'Di√°metro de la tuber√≠a (ID)']
st.write("A continuaci√≥n, ingrese los valores de las caracter√≠sticas que ser√°n utilizadas para la clasificaci√≥n de patrones de flujo en los modelos de Machine Learning:")        

def user_input_parameters():
    inputs = {}
    for i, feature in enumerate(features):
        row, col = i // 3, i % 3
        with st.container():
            if i % 3 == 0:
                cols = st.columns(3)
            inputs[feature] = cols[col].text_input(feature)
    data_features = {
        'Vsl' : inputs[features[0]],
        'Vsg' : inputs[features[1]],
        'VisL' : inputs[features[2]],
        'VisG' : inputs[features[3]],
        'DenL': inputs[features[4]],
        'DenG' : inputs[features[5]],
        'ST' : inputs[features[6]],
        'Ang' : inputs[features[7]],
        'ID' : inputs[features[8]]
        }
    features_df = pd.DataFrame(data_features, index = [0])
    return features_df


df = user_input_parameters()


# Crear un nuevo DataFrame con una fila adicional 'Valor'
df = df.T.reset_index()
df.columns = ['Caracter√≠stica', 'Valor']
df = df.set_index('Caracter√≠stica').T

st.table(df)

st.subheader("Predicci√≥n de patrones de flujo")

predict_button, clear_button = st.columns(2)
predict_clicked = predict_button.button('PREDECIR')

prediction = None

if predict_clicked:
# Validar que todos los campos contengan valores num√©ricos
    for value in df.values.flatten():
        if not value or not value.isdigit():
            st.warning("Por favor, complete todos los datos con valores num√©ricos antes de hacer la predicci√≥n.")
            break
        else:
            prediction = modelo.predict(df)
    
    st.success(f"El patr√≥n de flujo es: {prediction[0]}")

    # Crear un diccionario para asociar las predicciones con sus descripciones
    prediction_descriptions = {
        'DB': 'Flujo de burbujas dispersas (DB)',
        'SS': 'Flujo estratificado uniforme (SS)',
        'SW': 'Flujo estratificado ondulado (SW)',
        'A': 'Flujo anular (A)',
        'I': 'Flujo intermitente (I)',
        'B': 'Flujo de burbujas (B)',

    }

    # Mostrar la descripci√≥n completa de la predicci√≥n
    st.success(prediction_descriptions[prediction[0]])

    if prediction[0] in ["I", "A"]:
        st.warning("Alerta: Presta atenci√≥n a posibles fallos en la tuber√≠a.")


